# Use bash instead of sh
SHELL := /usr/bin/env bash
# Unify target echoing
PRINT_TARGET = @echo "--> $@"
# Default make goal
.DEFAULT_GOAL := help

## Targets
.PHONY: clean
clean:  ## Remove autogenerated and downloaded files
	$(PRINT_TARGET)
	@-rm -fr ./EFI ./OC/Sample.plist

.PHONY: help
help:  ## Display this help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	  | sort \
	  | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[0;32m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: lint
lint:  ## Run linter checks
	$(PRINT_TARGET)
	@echo "Linting property list files..."
	@find "${CURDIR}" -name '*.plist' -print0 | xargs -0 -n1 plutil -lint
	@echo "Linting bash scripts..."
	@shellcheck --version
	@find "${CURDIR}" -name '*.sh' -print0 | xargs -0 -t -n1 shellcheck --color=always --severity=style
	@echo "Linting YAML files..."
	@yamllint --version
	@yamllint -s "${CURDIR}"

.PHONY: oc_get_ref_config
oc_get_ref_config: clean  ## Download latest OpenCore reference configuration file to 'OC/Sample.plist' (used for debugging changes)
	$(PRINT_TARGET)
	@echo "Downloading 'https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/Sample.plist' to 'OC/Sample.plist'..."
ifeq "$(shell command -v wget)" ""
	$(error Cannot find wget)
endif
	@wget -nv -c https://raw.githubusercontent.com/acidanthera/OpenCorePkg/master/Docs/Sample.plist -O ./OC/Sample.plist
	@ls -lah ./OC/Sample.plist

.PHONY: run
run: clean  ## Generate EFI folder with 'config.plist' template
	$(PRINT_TARGET)
	@LOCAL_RUN=1 "${CURDIR}/create-efi.sh"

.PHONY: toc
toc:  ## Generate README.md table of contents
	$(PRINT_TARGET)
	@bash -c "$$(curl -fsSL raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc) README.md"

.PHONY: vault_pre
vault_pre:  ## Vault prerequisite checks
	$(PRINT_TARGET)
ifeq ($(ANSIBLE_VAULT_PASSWORD_FILE),)
	$(error ANSIBLE_VAULT_PASSWORD_FILE variable is not set)
endif
ifeq "$(shell command -v ansible-vault)" ""
	$(error Cannot find ansible-vault)
endif
	@ansible-vault --version

.PHONY: vault
vault: vault_pre run  ## Generate OpenCore 'config.plist' from template
	$(PRINT_TARGET)
	@"${CURDIR}/util/vault.sh"
