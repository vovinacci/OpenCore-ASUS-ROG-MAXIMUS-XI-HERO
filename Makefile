# Use bash instead of sh
SHELL := /usr/bin/env bash
# Unify target echoing
PRINT_TARGET = @echo "--> $@"
# Default make goal
.DEFAULT_GOAL := help
# Required OpenCore version
REQUIRED_OPENCORE_VERSION := $(shell grep 'readonly OPENCORE_VERSION=' create-efi.sh | awk -F'"' '{ print $$2; }')

## Targets
.PHONY: clean
clean:  ## Remove autogenerated and downloaded files
	$(PRINT_TARGET)
	-rm -fr ./EFI ./OC/Sample.plist ./util/ocvalidate EFI*.{tar.gz,zip}

git_tag_add:  ## Create and push git tag from `OC_GIT_TAG` env var to create GitHub release and upload assets
	$(PRINT_TARGET)
ifeq ($(OC_GIT_TAG),)
	$(error OC_GIT_TAG variable is not set)
endif
	git tag ${OC_GIT_TAG}
	git push origin ${OC_GIT_TAG}

git_tag_delete:  ## Delete and push git tag from `OC_GIT_TAG` env var
	$(PRINT_TARGET)
ifeq ($(OC_GIT_TAG),)
	$(error OC_GIT_TAG variable is not set)
endif
	git tag -d ${OC_GIT_TAG}
	git push --delete origin ${OC_GIT_TAG}

.PHONY: help
help:  ## Display this help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	  | sort \
	  | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[0;32m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: lint
lint:  ## Run linter checks
	$(PRINT_TARGET)
	@echo "GNU bash, version $${BASH_VERSION}"
	@echo "Linting property list files..."
	find "${CURDIR}" -name '*.plist' -print0 | xargs -0 -t -n1 plutil -lint
	@echo "Linting bash scripts..."
	shellcheck --version
	find "${CURDIR}" -name '*.sh' -print0 | xargs -0 -t -n1 shellcheck --color=always --severity=style
	@echo "Linting YAML files..."
	yamllint --version
	yamllint -s "${CURDIR}"

.PHONY: oc_get_ref_config
oc_get_ref_config: clean  ## Download latest OpenCore reference configuration file to 'OC/Sample.plist' (used for debugging changes)
	$(PRINT_TARGET)
ifeq "$(shell command -v wget)" ""
	$(error Cannot find wget)
endif
	wget -nv -c https://raw.githubusercontent.com/acidanthera/OpenCorePkg/$(REQUIRED_OPENCORE_VERSION)/Docs/Sample.plist -O ./OC/Sample.plist
	ls -lah ./OC/Sample.plist

.PHONY: run
run: clean  ## Generate EFI folder with 'config.plist' template
	$(PRINT_TARGET)
	LOCAL_RUN=1 "${CURDIR}/create-efi.sh"

.PHONY: test
test: clean  ## Run tests
	$(PRINT_TARGET)
	@echo "GNU bash, version $${BASH_VERSION}"
	@bats --version
	@bats ${CI:--tap} --timing test

.PHONY: toc
toc:  ## Generate README.md table of contents
	$(PRINT_TARGET)
	@bash -c "$$(curl -fsSL https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc) README.md"

.PHONY: vault_pre
vault_pre:  ## Vault prerequisite checks
	$(PRINT_TARGET)
ifeq "$(shell command -v sops)" ""
	$(error Cannot find sops)
endif
	sops --version

.PHONY: vault
vault: vault_pre run  ## Generate OpenCore 'config.plist' from template
	$(PRINT_TARGET)
	"${CURDIR}/util/vault.sh"
ifeq "$(shell command -v $(CURDIR)/util/ocvalidate)" ""
	$(error Cannot find $(CURDIR)/util/ocvalidate)
endif
	@echo "Validating 'config.plist'..."
	${CURDIR}/util/ocvalidate ${CURDIR}/EFI/OC/config.plist
